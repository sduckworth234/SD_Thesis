<?xml version="1.0"?>
<launch>
  <!-- ORB-SLAM3 Test Launch File -->
  
  <arg name="camera" default="camera" />
  <arg name="camera_type" default="rgbd" /> <!-- mono, stereo, rgbd -->
  
  <!-- ORB-SLAM3 Parameters -->
  <arg name="voc_file" default="/opt/ORB_SLAM3/Vocabulary/ORBvoc.txt" />
  <arg name="settings_file" default="$(find sd_thesis)/config/orbslam3_realsense.yaml" />
  
  <!-- Camera topics -->
  <arg name="rgb_topic" default="/$(arg camera)/color/image_raw" />
  <arg name="depth_topic" default="/$(arg camera)/depth/image_rect_raw" />
  <arg name="camera_info_topic" default="/$(arg camera)/color/camera_info" />
  
  <!-- Start camera if requested -->
  <arg name="start_camera" default="true" />
  <group if="$(arg start_camera)">
    <include file="$(find sd_thesis)/launch/test_camera.launch">
      <arg name="camera" value="$(arg camera)" />
      <arg name="rviz" value="false" />
      <arg name="image_view" value="false" />
    </include>
  </group>
  
  <!-- ORB-SLAM3 SLAM Node -->
  <node name="slam_node" pkg="sd_thesis" type="slam_node.py" output="screen">
    <param name="vocab_file" value="$(arg voc_file)" />
    <param name="settings_file" value="$(arg settings_file)" />
    <param name="camera_type" value="$(arg camera_type)" />
    
    <remap from="/camera/color/image_raw" to="$(arg rgb_topic)" />
    <remap from="/camera/depth/image_rect_raw" to="$(arg depth_topic)" />
    <remap from="/camera/color/camera_info" to="$(arg camera_info_topic)" />
  </node>
  
  <!-- SLAM Test Node -->
  <node name="slam_test" pkg="sd_thesis" type="test_slam.py" output="screen">
    <param name="camera_type" value="$(arg camera_type)" />
  </node>
  
  <!-- Optional: RViz for SLAM visualization -->
  <arg name="rviz" default="true" />
  <group if="$(arg rviz)">
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find sd_thesis)/config/slam_test.rviz" />
  </group>
  
  <!-- TF Static transforms for camera -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="camera_base_link"
        args="0 0 0 0 0 0 base_link $(arg camera)_link" />
  
  <!-- Optional: Save trajectory -->
  <arg name="save_trajectory" default="false" />
  <group if="$(arg save_trajectory)">
    <node name="trajectory_saver" pkg="sd_thesis" type="save_trajectory.py" output="screen">
      <param name="output_file" value="$(find sd_thesis)/data/trajectories/test_trajectory.txt" />
    </node>
  </group>
  
</launch>
